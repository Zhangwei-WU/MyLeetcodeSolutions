namespace LeetCode.P924
{
    using System;
    using System.Collections.Generic;

    public class Solution
    {
        public int MinMalwareSpread(int[][] graph, int[] initial)
        {
            var glen = graph.Length;
            var head = new int[glen];
            var size = new int[glen];

            Queue<int> bfs = new Queue<int>(glen);
            HashSet<int> set = new HashSet<int>(initial);

            var min = int.MaxValue;
            var ilen = initial.Length;
            for (int i = 0; i < ilen; i++)
            {
                var n = initial[i];
                if (n < min) min = n;
                var h = head[n];
                if (h != 0)
                {
                    set.Remove(n);
                    set.Remove(h - 1);
                    continue;
                }

                bfs.Enqueue(n);
                head[n] = n + 1;
                size[n]++;

                while (bfs.Count != 0)
                {
                    var edges = graph[bfs.Dequeue()];
                    for (var j = 0; j < glen; j++)
                    {
                        if (edges[j] == 0 || head[j] != 0) continue;
                        bfs.Enqueue(j);
                        head[j] = n + 1;
                        size[n]++;
                    }
                }
            }
            
            if (set.Count == 0) return min;

            set.CopyTo(initial);
            Array.Sort(initial, 0, set.Count, Comparer<int>.Create((a, b) => { var cp = size[b] - size[a]; if (cp != 0) return cp; return a - b; }));
            
            return initial[0];
        }
    }
}
