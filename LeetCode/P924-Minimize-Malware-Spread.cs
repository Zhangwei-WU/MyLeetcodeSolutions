namespace LeetCode.P924
{
    using System.Collections.Generic;
    using System.Linq;

    public class Solution
    {
        public int MinMalwareSpread(int[][] graph, int[] initial)
        {
            var groupInfo = new int[graph.Length];
            Queue<int> bfs = new Queue<int>();

            for (int i = 0, ilen = initial.Length, glen = graph.Length; i < ilen; i++)
            {
                var ii = initial[i];
                if (groupInfo[ii] != 0) continue;
                bfs.Enqueue(ii);
                groupInfo[ii] = ii + 1;

                while (bfs.Count != 0)
                {
                    var edges = graph[bfs.Dequeue()];
                    for (var j = 0; j < glen; j++)
                    {
                        if (edges[j] == 0 || groupInfo[j] != 0) continue;
                        bfs.Enqueue(j);
                        groupInfo[j] = ii + 1;
                    }
                }
            }

            var malwareInfo = initial
                .GroupBy(p => groupInfo[p])
                .Where(p => p.Count() == 1)
                .Select(p => new KeyValuePair<int, int>(p.Key, p.First()))
                .ToArray();

            if (malwareInfo.Length == 0) return initial.Min();

            var groupCount = groupInfo.GroupBy(p => p).ToDictionary(p => p.Key, p => p.Count());
            return malwareInfo.OrderByDescending(p => groupCount[p.Key])
                .ThenBy(p => p.Value)
                .First().Value;
        }
    }
}
